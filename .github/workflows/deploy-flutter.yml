name: Deploy Flutter

on:
  workflow_call:
    inputs:
      flutter-version:
        type: string
        description: 'Version of Flutter to use'
        required: true
        default: '3.x.x'
      release-branches:
        type: string
        description: The branches on which releases should happen, comma separated name of branches
        required: false
        default: 'main'
      prerelease-branches:
        type: string
        description: The branches on which prereleases should happen, comma separated name of branches
        required: false
        default: 'rc,beta,alpha'
      send-pr-release-notification:
        type: string
        description: To send or not the "Released" comment when the PR is include in a (pre)released tag
        required: false
        default: 'false'
    secrets:
      uploadKeyStore:
        description: The keystore file to sign the app
        required: false
      uploadKeyName:
        description: The name of the key to sign the app
        required: false
      uploadKeyPassword:
        description: The password of the key to sign the app
        required: false
      serviceAccountJsonPlainText:
        description: The token that'll authentificate the user to the Google Playstore API to create new release
        required: true
      

jobs:

  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - id: semantic-release
        name: Release
        uses: ./jobs/semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release-branches: ${{ inputs.release-branches }}
          prerelease-branches: ${{ inputs.prerelease-branches }}
          dry-run: true
      
    outputs:
      version: ${{ steps.semantic-release.outputs.release-version }}
    
  build:
    name: Build ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ web, windows, linux, macos, android, ios ]
        include:
          - platform: web
            targets: zip
            runner: ubuntu-latest
            artifacts: dist/web/lenra*.zip
          - platform: linux
            targets: zip,deb,rpm,appimage
            runner: ubuntu-latest
            artifacts: dist/linux/lenra*.{zip,deb,rpm,AppImage}
          - platform: android
            targets: apk,aab
            runner: ubuntu-latest
            artifacts: dist/android/lenra*.{apk,aab}
          - platform: windows
            targets: zip,exe,msix
            runner: windows-latest
            artifacts: dist/windows/lenra*.{zip,exe,msix}
          - platform: macos
            targets: zip,dmg
            runner: macos-latest
            artifacts: dist/macos/lenra*.{zip,dmg}
          - platform: ios
            targets: ipa
            runner: macos-latest
            artifacts: dist/ios/lenra*.ipa
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Build
        if: ${{ steps.get-version.outputs.release-published }}
        uses: ./jobs/build-flutter
        with:
          target: android
      
      - name: Upload Artifacts
        if: ${{ steps.get-version.outputs.release-published }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}
          path: ${{ matrix.artifacts }}
  
  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - id: list-assets
        name: List assets
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const globber = await glob.create('artifacts/*/*')
            const files = await globber.glob()
            return files.join('\n')

      - id: semantic-release
        name: Release
        uses: ./jobs/semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release-branches: ${{ inputs.release-branches }}
          prerelease-branches: ${{ inputs.prerelease-branches }}
          assets: ${{ steps.list-assets.outputs.result }}
          send-pr-release-notification: ${{ inputs.send-pr-release-notification }}

      - name: Create service_account.json
        id: createServiceAccount
        run: echo '${{ secrets.serviceAccountJsonPlainText }}' > service_account.json

      - name: Get android asset
        id: get-android-asset
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const files = "${{ steps.list-assets.outputs.result }}".split('\n')
            const androidAABFiles = files.filter(file => file.includes('aab'))
            if (androidAABFiles.length > 0) {
              return androidAABFiles[0]
            }
            const androidAPKFiles = files.filter(file => file.includes('apk'))
            if (androidAPKFiles.length > 0) {
              return androidAPKFiles[0]
            }
            return ''

      - id: get-track-to-release
        name: Get track to release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const releaseTrack = 'production'
            const releaseChannels = "${{ inputs.release-branches }}".split(',')
            const currentChannel = "${{ github.ref_name }}"
            if (releaseChannels.includes(currentChannel)) {
              return releaseTrack
            }

            const prereleaseTracks = ['beta', 'alpha', 'internal']
            const prereleaseChannels = "${{ inputs.prerelease-branches }}".split(',')
            
            if (prereleaseChannels.includes(currentChannel)) {
              const index = prereleaseChannels.indexOf(currentChannel)
              if (index >= prereleaseTracks.length) {
                return prereleaseTracks.pop()
              }
              return prereleaseTracks[index]
            }
            return prereleaseTracks.pop()
      
      - id: get-changelogs
        name: Get ChangeLogs
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const version = "${{ steps.semantic-release.outputs.release-version }}"
            const release = github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: version
            })
            const changelogs = release.data.body
            return changelogs
            
      - name: Deploy to Play Store (BETA)
        id: deploy
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service_account.json
          packageName: fr.lenra.io
          releaseFile: ${{ steps.get-android-asset.outputs.result }}
          track: ${{ steps.get-track-to-release.outputs.result }}
          whatsNewDirectory: ${{ steps.get-changelogs.outputs.result }}
