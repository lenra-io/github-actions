name: Build Bun App
# description: Build a Bun application and generate an artifact.

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: 'Current Working directory (Useful for mono-repo)'
        required: false
        default: '.'
      bun-version:
        type: string
        description: 'Version of Java to use'
        required: false
        default: 'latest'
      artifact-name:
        type: string
        description: 'Name of the artifact to upload, default: is basename of the artifact if single file, or dirname if multiple files, followed by the OS name'
        required: false
      artifact-path:
        type: string
        description: 'Path to the generated artifact to upload'
        required: false
        default: 'dist/'
    outputs:
      artifact-id:
        description: 'The ID of the uploaded artifact'
        value: ${{ steps.artifact-path.outputs.artifact-id }}
      artifact-url:
        description: 'The URL of the uploaded artifact'
        value: ${{ steps.artifact-path.outputs.artifact-url }}

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ inputs.bun-version }}

      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: ${{inputs.working-directory}}/node_modules
          key: ${{ runner.os }}-bun-web-${{ hashFiles(format('{0}/bun.lock', inputs.working-directory)) }}
          restore-keys: ${{ runner.os }}-bun-web-

      - name: Install Bun dependencies
        run: bun install

      - id: build
        name: Build with Bun
        run: |
          bun run build
          if [ -n "${{ inputs.artifact-path }}" ]; then
            echo -e "Artifact path is set to '${{ inputs.artifact-path }}.\nIncluding :"
            ARTIFACT_CONTENT="$(ls -dAp "${{ inputs.artifact-path }}")"
            echo "$ARTIFACT_CONTENT"
            if [ -z "${{ inputs.artifact-name }}" ]; then
              artifact_path="${{ inputs.artifact-path }}"
              if [ -d "$artifact_path" ]; then
                echo "Artifact path is a directory, using it as is."
                artifact_path="$(dirname "$artifact_path")"
              elif [ -f "$artifact_path" ]; then
                echo "Artifact path is a file, using it as is."
                artifact_path="$artifact_path"
              elif [ "$(ls -A "$artifact_path")" ]; then
                echo "Artifact is multiple files, using the directory."
                artifact_path="$(dirname "$artifact_path")"
              fi
              ARTIFACT_NAME="${artifact_path}-${{ runner.os }}"
            else
              ARTIFACT_NAME="${{ inputs.artifact-name }}"
            fi
            echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts
        if: steps.build.outputs.artifact-name != ''
        id: artifact-path
        uses: actions/artifact-path@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.working-directory }}/${{ inputs.artifact-path }}
