name: Get Version
# description: Determine the version of the project based on the latest commit and generate a changelog using the Rust Convco cli tool.

on:
  workflow_call:
    inputs:
      convco-version:
        type: string
        description: 'Version of Convco to use (default: latest)'
        required: false
        default: 'latest'
      path:
        type: string
        description: 'Only commits that update those <paths> will be taken into account.'
        required: false
      release-branch:
        type: string
        description: 'Name of the release branch'
        required: false
        default: main
      prerelease-branches:
        type: string
        description: 'Prerelease branch names'
        required: false
        default: beta,alpha,rc
      changelog-include-hidden-section:
        type: boolean
        description: 'Include hidden sections in the changelog'
        required: false
        default: false
    outputs:
      version:
        description: 'The calculated version'
        value: ${{ jobs.get_version.outputs.version }}
      changelog:
        description: 'The changes between calculated version and previous version'
        value: ${{ jobs.get_version.outputs.changelog }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.get_version.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Restore convco from cache
        id: convco-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            ~/.cargo/bin/
            /var/lib/apt/lists
          key: ${{ runner.os }}-convco-${{ inputs.convco-version }}
          restore-keys: ${{ runner.os }}-convco-
      - name: Install cmake
        run: |
          if ! command -v cmake &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y cmake
          fi
      - name: Setup convco
        run: |
          echo "${{steps.convco-cache.outputs.cache-hit}}"
      - name: Setup convco
        if: steps.convco-cache.outputs.cache-hit != 'true'
        run: |
          args=""
          if [ "${{ inputs.convco-version }}" != "latest" ]; then
            args="--version ${{ inputs.convco-version }}"
          fi
          cargo install convco $args --force
      - name: Determine version using convco CLI
        id: get_version
        run: |
          if [[ -n "${{ inputs.path }}" ]]; then
            echo "Using path: ${{ inputs.path }}"
            path_args="--path ${{ inputs.path }}"
          fi
          IFS="," read -ra prerelease_branches <<< "${{ inputs.prerelease-branches }}"
          IFS="," read -ra release_branches <<< "${{ inputs.prerelease-branches }}"
          current_branch=${{ github.ref_name }}
          must_release=false
          if [[ "$IFS${prerelease_branches[*]}$IFS" =~ "$IFS${current_branch}$IFS" ]] ; then
            must_release=true
            prerelease_args="--prerelease"
            channel=${current_branch}
          fi
          if [[ "$IFS${prerelease_branches[*]}$IFS" =~ "$IFS${current_branch}$IFS" ]]; then
            must_release=true
          fi
          if ${must_release} ; then
            if ${{ inputs.changelog-include-hidden-section }} ; then
              hidden_args="--include-hidden-section"
            fi
            VERSION=$(~/.cargo/bin/convco version -b $prerelease_args)
            CHANGELOG=$(~/.cargo/bin/convco changelog $hidden_args -u $VERSION)
            echo "Determined version: ${VERSION}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            if [ -n "${channel}" ]; then
              echo "channel=${channel}" >> $GITHUB_OUTPUT
            fi
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "${CHANGELOG}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Will not release: Event not hit a release_branches or prerelease_branches"
          fi
