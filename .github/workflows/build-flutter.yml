name: Build Flutter App
# description: Build Flutter app for the chosen targets. Will output the build file(s) for the selected platform as an artifact.

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: 'Current Working directory (Useful for mono-repo and run this only in this directory)'
        required: false
        default: '.'
      version:
        type: string
        description: 'Version to build'
        required: true
      build:
        type: string
        description: 'Build identifier'
        required: true
      flutter-version:
        type: string
        description: 'Version of Flutter to use'
        required: false
      flutter-channel:
        type: string
        description: 'Channel of Flutter to use'
        required: false
        default: 'stable'
      flutter-build-args:
        type: string
        description: 'Comma separated list of flutter build extra args (e.g., release,verbose,obfuscate,split-debug-info=.debug,split-per-abi)'
        required: false
        default: 'release'
      platform:
        type: string
        description: 'Target platform'
        required: true
      targets:
        type: string
        description: 'Build targets (comma separated if many)'
        required: true
      runner:
        type: string
        description: 'Runner label (e.g., ubuntu-latest, macos-latest, windows-latest)'
        required: true
      artifact-name:
        type: string
        description: 'Give a name for build artifacts'
        required: false
      artifact-path:
        type: string
        description: 'Glob pattern for build artifacts'
        required: false
      ios-app-identifier:
        type: string
        description: 'iOS app identifier/bundle ID for provisioning profile'
        required: false
    secrets:
      UPLOAD_KEY_STORE:
        description: 'Keystore file content for Android signing'
        required: false
      UPLOAD_KEY_NAME:
        description: 'Alias name for the Android key'
        required: false
      UPLOAD_KEY_PASSWORD:
        description: 'Password for the Android key'
        required: false
      UPLOAD_STORE_PASSWORD:
        description: 'Password for the Android keystore'
        required: false
      IOS_KEYCHAIN:
        description: 'iOS base64 value that contains the certificates'
        required: false
      IOS_KEYCHAIN_NAME:
        description: 'iOS Keychain''s name'
        required: false
      IOS_KEYCHAIN_PASSWORD:
        description: 'iOS Keychain''s password'
        required: false
      IOS_SIGN_CERT:
        description: 'iOS fastlane signing certificate in base64'
        required: false
    outputs:
      artifact-id:
        description: 'The ID of the uploaded artifact'
        value: ${{ jobs.build.outputs.artifact-id }}
      artifact-url:
        description: 'The URL of the uploaded artifact'
        value: ${{ jobs.build.outputs.artifact-url }}

jobs:
  build:
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runner }}
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: ${{ inputs.flutter-channel }}
          flutter-version: ${{ inputs.flutter-version }}
          cache: true

      - name: Generate Keystore
        if: inputs.platform == 'android'
        uses: lenra-io/github-actions/jobs/android-keystore@main
        with:
          path: '${{ inputs.working-directory }}/android/key.properties'
          upload-key-store: ${{ secrets.UPLOAD_KEY_STORE }}
          upload-key-name: ${{ secrets.UPLOAD_KEY_NAME }}
          upload-store-password: ${{ secrets.UPLOAD_STORE_PASSWORD }}
          upload-key-password: ${{ secrets.UPLOAD_KEY_PASSWORD }}

      - name: Update version
        uses: actions/github-script@v7
        with:
          debug: true
          script: |
            // Update pubspec.yaml inplace
            const fs = require('fs')
            const path = require('path')
            const pubspecPath = path.join('${{ inputs.working-directory}}', 'pubspec.yaml')
            // edit version and build number
            if (!fs.existsSync(pubspecPath)) {
              throw new Error(`pubspec.yaml file not found at ${pubspecPath}`);
            }
            let pubspec;
            try {
              pubspec = fs.readFileSync(pubspecPath, 'utf8');
            } catch (err) {
              throw new Error(`Failed to read pubspec.yaml: ${err.message}`);
            }
    
            // Remove channel from version, if we have `1.0.0-beta.1`, we want `1.0.0.1`
            // const version = '${{ inputs.version }}'.replace(/-.*$/, '')
            const version = '${{ inputs.version }}'
    
            const build = '${{ inputs.build }}'
            let version_string = ''
            if (build.length > 0) {
              version_string = `${version}+${build}`
            } else {
              version_string = `${version}`
            }
            const newPubspec = pubspec.replace(/version: .*/, `version: ${version_string}`)
            try {
              fs.writeFileSync(pubspecPath, newPubspec);
            } catch (err) {
              throw new Error(`Failed to write to pubspec.yaml: ${err.message}`);
            }

      - name: Install Dependencies (linux)
        shell: sh
        if: contains(inputs.targets, 'appimage')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y make cmake ninja-build libgtk-3-dev locate libfuse2 libsecret-1-dev libjsoncpp-dev
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/
    
      - name: Install Dependencies (macos)
        shell: sh
        if: contains(inputs.targets, 'dmg')
        run: |
          npm install -g appdmg
          
      - name: Cache
        uses: actions/cache@v4.2.3
        if: inputs.platform == 'android'
        with:
          path: /usr/local/lib/android/sdk
          key: cache-android-sdk
          enableCrossOsArchive: true
          save-always: true
          
      - name: Install iOS provisioning profiles
        if: inputs.platform == 'ios'
        env:
          KEYCHAIN: ${{ secrets.KEYCHAIN }}
          KEYCHAIN_NAME: ${{ secrets.KEYCHAIN_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          FASTLANE_SIGN_CERT: ${{ secrets.IOS_SIGN_CERT }}
        run: |
          certificate_dir="$(mktemp -d)/"
          
          # Decode and import
          echo "$KEYCHAIN" | base64 -d > ${certificate_dir}/keychain.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security import ${certificate_dir}/keychain.p12 -k "$KEYCHAIN_NAME" -P "$KEYCHAIN_PASSWORD" -T /usr/bin/codesign
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          
          # Import certificate
          echo "${FASTLANE_SIGN_CERT}" | base64 -d > ${certificate_dir}/app.crt
          fastlane run import_certificate certificate_path:"${certificate_dir}/app.crt" keychain_name:"$KEYCHAIN_NAME" keychain_password:"$KEYCHAIN_PASSWORD"

          # Download provisioning profile
          fastlane sigh --app_identifier ${{ inputs.ios-app-identifier }} --adhoc true

      - id: build
        name: Build App for ${{ inputs.platform }}
        run: |
          echo "Building for platform: ${{ inputs.platform }}"
          echo "Version: ${{ inputs.version }}"
          echo "Build ID: ${{ inputs.build }}"
          echo "Targets: ${{ inputs.targets }}"

          # Parse flutter build args
          BUILD_ARGS="${{ inputs.flutter-build-args }}"
          
          # Parse targets
          IFS=',' read -ra TARGET_LIST <<< "${{ inputs.targets }}"
          
          # Get dependencies
          flutter pub get

          # Build for each target
          for target in "${TARGET_LIST[@]}"; do
            target=$(echo "$target" | xargs) # trim whitespace
            echo "Building target: $target"
            echo "Build command: flutter build $target $BUILD_ARGS"
            flutter build $target $BUILD_ARGS
          done

      - name: Upload build artifacts
        if: inputs.artifact-name != '' && inputs.artifact-path != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: ${{ inputs.working-directory }}/${{ inputs.artifact-path }}
