name: Build Flutter App
description: Build Flutter app for the chosen targets. Will output the build file(s) for the selected platform as an artifact.

on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: 'Current Working directory (Useful for mono-repo and run this only in this directory)'
        required: false
        default: '.'
      version:
        type: string
        description: 'Version to build'
        required: true
      build:
        type: string
        description: 'Build identifier'
        required: true
      flutter-version:
        type: string
        description: 'Version of Flutter to use'
        required: false
      flutter-channel:
        type: string
        description: 'Channel of Flutter to use'
        required: false
        default: 'stable'
      flutter-extra-args:
        type: string
        description: 'Comma separated list of flutter build extra args (e.g., release,verbose,obfuscate,split-per-abi)'
        required: false
        default: 'release,obfuscate'
      platform:
        type: string
        description: 'Target platform'
        required: true
      targets:
        type: string
        description: 'Build targets (comma separated if many)'
        required: true
      runner:
        type: string
        description: 'Runner label (e.g., ubuntu-latest, macos-latest, windows-latest)'
        required: true
      artifacts:
        type: string
        description: 'Glob pattern for build artifacts'
        required: false
    secrets:
      upload-key-store:
        description: 'Keystore file content for Android signing'
        required: false
      upload-key-name:
        description: 'Alias name for the Android key'
        required: false
      upload-key-password:
        description: 'Password for the Android key'
        required: false

jobs:
  build:
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter Environment
        uses: subosito/flutter-action@v2.18.0
        with:
          channel: ${{ inputs.flutter-channel }}
          flutter-version: ${{ inputs.flutter-version }}
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

      - name: Generate Keystore
        if: inputs.platform == 'android'
        uses: lenra-io/github-actions/jobs/android-keystore@main
        with:
          path: './android/app/key.properties'
          upload-key-store: ${{ secrets.upload-key-store }}
          upload-key-name: ${{ secrets.upload-key-name }}
          upload-store-password: ${{ secrets.upload-key-password }}
          upload-key-password: ${{ secrets.upload-key-password }}

      - name: Update version
        uses: actions/github-script@v7
        with:
          script: |
            // Update pubspec.yaml inplace
            const fs = require('fs')
            const path = require('path')
            const pubspecPath = path.join(process.env.GITHUB_WORKSPACE, 'pubspec.yaml')
            // edit version and build number
            const pubspec = fs.readFileSync(pubspecPath, 'utf8')
    
            # // Remove channel from version, if we have `1.0.0-beta.1`, we want `1.0.0.1`
            # const version = '${{ inputs.version }}'.replace(/-.*$/, '')
            const version = '${{ inputs.version }}'
    
            const build = '${{ inputs.build }}'
            let version_string = ''
            if (build.length > 0) {
              version_string = `${version}+${build}`
            } else {
              version_string = `${version}`
            }
            const newPubspec = pubspec.replace(/version: .*/, `version: ${version_string}`)
            fs.writeFileSync(pubspecPath, newPubspec)

      - name: Install Dependencies (linux)
        shell: sh
        if: contains(inputs.targets, 'appimage')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y make cmake ninja-build libgtk-3-dev locate libfuse2 libsecret-1-dev libjsoncpp-dev
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/
    
      - name: Install Dependencies (macos)
        shell: sh
        if: contains(inputs.targets, 'dmg')
        run: |
          npm install -g appdmg

      - name: Build App for ${{ inputs.platform }}
        run: |
          echo "Building for platform: ${{ inputs.platform }}"
          echo "Version: ${{ inputs.version }}"
          echo "Build ID: ${{ inputs.build }}"
          echo "Targets: ${{ inputs.targets }}"

          dart pub global activate flutter_distributor

          platform=${{ inputs.platform }}
          IFS=',' read -r -a flutter_extra_args <<< "${{ inputs.flutter-extra-args }}"
          IFS=',' read -r -a targets <<< "${{ inputs.targets }}"

          if [ "${#targets[@]}" -gt 0 ]; then
            echo "No targets specified. Exiting..."
            exit 1
          fi

          # If flutter_extra_args has split-per-abi,
          # separate APK build than other targets 
          # and use split-per-abi only on android apk build.
          if [ "${platform}" = "android" ]; then
            if [[ " ${flutter_extra_args[@]} " =~ " split-per-abi " ]]; then
              echo "WARNING: Splitting per ABI only work on APK targets. Removing it from other android targets."
              flutter_distribution package --flutter-extra-args=$(IFS="," echo "${flutter_extra_args[*]}") --platform android --targets apk
              build_path="build/app/outputs/flutter-apk"
              output_path="dist/${{ inputs.version }}+${{ inputs.build }}"
              wrong_file_path=$(ls ${output_path}/*.apk | head -n1)
              generated_name=$(basename "${wrong_file_path%-*}")
              rm ${output_path}/*-${{ inputs.version }}+${{ inputs.build }}-*.apk
              # for each in build/app/outputs/flutter-apk/*.apk
              flutter_extra_args=(${flutter_extra_args[@]//*split-per-abi*/})
              targets=(${targets[@]//*apk*/})
            fi
          fi

          # if targets is not empty, build the targets
          if [ "${#targets[@]}" -gt 0 ]; then
            flutter_distributor package --flutter-extra-args=$(IFS="," echo "${flutter_extra_args[*]}") --platform ${{ inputs.platform }} --targets $(IFS="," echo "${targets[*]}")
          fi
      - name: Upload build artifacts
        if: inputs.artifacts != ''
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.platform }}
          path: ${{ inputs.artifacts }}
